/*
 * @file ./testcases/output/ass6_21CS10016_21CS30050_test_5.s
 * @brief This file contains the assembly code for the input source file.
 * It is generated by the tinyC Compiler.
Assignment Number 6
Student Information:
 - Bratin Mondal(Roll Number - 21CS10016)
 - Somya Kumar(Roll Number - 21CS30050)
  */

	.file	"./testcases/input/ass6_21CS10016_21CS30050_test_5.c"
	.text
	.section	.rodata
.LC0:
	.string	"Testing Conditional Jumps\n"
.LC1:
	.string	"x = "
.LC2:
	.string	"\n"
.LC3:
	.string	"x == 123\n"
.LC4:
	.string	"Success \n"
.LC5:
	.string	"x!=123\n"
.LC6:
	.string	"Fail\n"
.LC7:
	.string	"x > 100 && x < 150 \n"
.LC8:
	.string	"Success \n"
.LC9:
	.string	"Fail\n"
.LC10:
	.string	"x > 100 || x < 50 \n"
.LC11:
	.string	"Success \n"
.LC12:
	.string	"Fail\n"
.LC13:
	.string	"x > 1000 || x == 200 \n"
.LC14:
	.string	"Fail\n"
.LC15:
	.string	"(x % 3) != 0 \n"
.LC16:
	.string	"Fail\n"
.LC17:
	.string	"Success\n"
.LC18:
	.string	"Fail\n"
.LC19:
	.float	-1
	.text
	.globl	main
	.type	main, @function
main: 
.LFB0:
	.cfi_startproc
	pushq 	%rbp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movq 	%rsp, %rbp
	.cfi_def_cfa_register 5
	subq	$312, %rsp

	movq 	$.LC0, -24(%rbp)
	movq 	-24(%rbp), %rdi
	call	printStr
	movl	%eax, -32(%rbp)
	movl	$123, %eax
	movl 	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl 	%eax, -36(%rbp)
	movq 	$.LC1, -44(%rbp)
	movq 	-44(%rbp), %rdi
	call	printStr
	movl	%eax, -52(%rbp)
	movq 	-36(%rbp), %rdi
	call	printInt
	movl	%eax, -56(%rbp)
	movq 	$.LC2, -60(%rbp)
	movq 	-60(%rbp), %rdi
	call	printStr
	movl	%eax, -68(%rbp)
	movl	$123, %eax
	movl 	%eax, -72(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	je .L1
	jmp .L2
.L1: 
	nop
	movq 	$.LC3, -120(%rbp)
	movq 	-120(%rbp), %rdi
	call	printStr
	movl	%eax, -128(%rbp)
	movq 	$.LC4, -132(%rbp)
	movq 	-132(%rbp), %rdi
	call	printStr
	movl	%eax, -140(%rbp)
	jmp .L2
.L2: 
	movl	$123, %eax
	movl 	%eax, -76(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jne .L3
	jmp .L4
.L3: 
	nop
	movq 	$.LC5, -144(%rbp)
	movq 	-144(%rbp), %rdi
	call	printStr
	movl	%eax, -152(%rbp)
	movq 	$.LC6, -156(%rbp)
	movq 	-156(%rbp), %rdi
	call	printStr
	movl	%eax, -164(%rbp)
	jmp .L8
.L4: 
	movl	$100, %eax
	movl 	%eax, -80(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jg .L5
	jmp .L7
.L5: 
	movl	$150, %eax
	movl 	%eax, -84(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jl .L6
	jmp .L7
.L6: 
	nop
	movq 	$.LC7, -168(%rbp)
	movq 	-168(%rbp), %rdi
	call	printStr
	movl	%eax, -176(%rbp)
	movq 	$.LC8, -180(%rbp)
	movq 	-180(%rbp), %rdi
	call	printStr
	movl	%eax, -188(%rbp)
	jmp .L8
.L7: 
	nop
	movq 	$.LC9, -192(%rbp)
	movq 	-192(%rbp), %rdi
	call	printStr
	movl	%eax, -200(%rbp)
.L8: 
	movl	$100, %eax
	movl 	%eax, -88(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg .L10
	jmp .L9
.L9: 
	movl	$50, %eax
	movl 	%eax, -92(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jl .L10
	jmp .L11
.L10: 
	nop
	movq 	$.LC10, -204(%rbp)
	movq 	-204(%rbp), %rdi
	call	printStr
	movl	%eax, -212(%rbp)
	movq 	$.LC11, -216(%rbp)
	movq 	-216(%rbp), %rdi
	call	printStr
	movl	%eax, -224(%rbp)
	jmp .L12
.L11: 
	nop
	movq 	$.LC12, -228(%rbp)
	movq 	-228(%rbp), %rdi
	call	printStr
	movl	%eax, -236(%rbp)
.L12: 
	movl	$1000, %eax
	movl 	%eax, -96(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jg .L14
	jmp .L13
.L13: 
	movl	$200, %eax
	movl 	%eax, -100(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-100(%rbp), %eax
	je .L14
	jmp .L15
.L14: 
	nop
	movq 	$.LC13, -240(%rbp)
	movq 	-240(%rbp), %rdi
	call	printStr
	movl	%eax, -248(%rbp)
	movq 	$.LC14, -252(%rbp)
	movq 	-252(%rbp), %rdi
	call	printStr
	movl	%eax, -260(%rbp)
	jmp .L19
.L15: 
	movl	$3, %eax
	movl 	%eax, -104(%rbp)
	movl 	-36(%rbp), %eax
	cltd
	idivl 	-104(%rbp)
	movl 	%edx, -108(%rbp)
	movl	$0, %eax
	movl 	%eax, -112(%rbp)
	movl	-108(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jne .L16
	jmp .L17
.L16: 
	nop
	movq 	$.LC15, -264(%rbp)
	movq 	-264(%rbp), %rdi
	call	printStr
	movl	%eax, -272(%rbp)
	movq 	$.LC16, -276(%rbp)
	movq 	-276(%rbp), %rdi
	call	printStr
	movl	%eax, -284(%rbp)
	jmp .L19
.L17: 
	nop
	movq 	$.LC17, -288(%rbp)
	movq 	-288(%rbp), %rdi
	call	printStr
	movl	%eax, -296(%rbp)
	jmp .L19
.L18: 
	nop
	movq 	$.LC18, -300(%rbp)
	movq 	-300(%rbp), %rdi
	call	printStr
	movl	%eax, -308(%rbp)
	movl	-36(%rbp), %eax
	cmpl	0(%rbp), %eax
	je .L18
	jmp .L17
.L19: 
	movl	$0, %eax
	movl 	%eax, -116(%rbp)
	movq	-116(%rbp), %rax

	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
