/*
 * @file ./testcases/output/ass6_21CS10016_21CS30050_test_1.s
 * @brief This file contains the assembly code for the input source file.
 * It is generated by the tinyC Compiler.
Assignment Number 6
Student Information:
 - Bratin Mondal(Roll Number - 21CS10016)
 - Somya Kumar(Roll Number - 21CS30050)
  */

	.file	"./testcases/input/ass6_21CS10016_21CS30050_test_1.c"
	.text
	.section	.rodata
.LC0:
	.string	"\nThis is for Integer\n"
.LC1:
	.string	"int_a = "
.LC2:
	.string	"\nint_b = "
.LC3:
	.string	"\nint_c = "
.LC4:
	.string	"\nc+;\n"
.LC5:
	.string	"int_c = "
.LC6:
	.string	"\n"
.LC7:
	.string	"int_c = int_a + int_b\n"
.LC8:
	.string	"int_c = "
.LC9:
	.string	"\n"
.LC10:
	.string	"int_c = -int_b\n"
.LC11:
	.string	"int_c = "
.LC12:
	.string	"\n"
.LC13:
	.string	"int_a is equal to int_b\n"
.LC14:
	.string	"int_a is not equal to int_b\n"
.LC15:
	.string	"\nThis is for Float\n"
.LC16:
	.string	"float_a = "
.LC17:
	.string	"\nfloat_b = "
.LC18:
	.string	"\nfloat_c = "
.LC19:
	.string	"\n"
.LC20:
	.string	"float_c = float_a + float_b\n"
.LC21:
	.string	"float_c = "
.LC22:
	.string	"\n"
.LC23:
	.string	"float_c = float_a * float_b\n"
.LC24:
	.string	"float_c = "
.LC25:
	.string	"\n"
.LC26:
	.string	"float_c = float_a / float_b\n"
.LC27:
	.string	"float_c = "
.LC28:
	.string	"\n"
.LC29:
	.string	"float_c = float_a - float_b\n"
.LC30:
	.string	"float_c = "
.LC31:
	.string	"\n"
.LC32:
	.string	"float_c = -float_b\n"
.LC33:
	.string	"float_c = "
.LC34:
	.string	"\n"
	.section	.rodata
.LC35:
	.float	3
.LC36:
	.float	6.5
.LC37:
	.float	4
.LC38:
	.float	-1
	.text
	.globl	main
	.type	main, @function
main: 
.LFB0:
	.cfi_startproc
	pushq 	%rbp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movq 	%rsp, %rbp
	.cfi_def_cfa_register 5
	subq	$636, %rsp

	movq 	$.LC0, -24(%rbp)
	movq 	-24(%rbp), %rdi
	call	printStr
	movl	%eax, -32(%rbp)
	movl	$3, %eax
	movl 	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl 	%eax, -36(%rbp)
	movl	$6, %eax
	movl 	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	movl 	%eax, -40(%rbp)
	movl	$4, %eax
	movl 	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	movl 	%eax, -44(%rbp)
	movq 	$.LC1, -72(%rbp)
	movq 	-72(%rbp), %rdi
	call	printStr
	movl	%eax, -80(%rbp)
	movq 	-36(%rbp), %rdi
	call	printInt
	movl	%eax, -84(%rbp)
	movq 	$.LC2, -88(%rbp)
	movq 	-88(%rbp), %rdi
	call	printStr
	movl	%eax, -96(%rbp)
	movq 	-40(%rbp), %rdi
	call	printInt
	movl	%eax, -100(%rbp)
	movq 	$.LC3, -104(%rbp)
	movq 	-104(%rbp), %rdi
	call	printStr
	movl	%eax, -112(%rbp)
	movq 	-44(%rbp), %rdi
	call	printInt
	movl	%eax, -116(%rbp)
	movl	-44(%rbp), %eax
	movl 	%eax, -120(%rbp)
	movl	-44(%rbp), %eax
	incl	%eax
	movl	%eax, -44(%rbp)

	movq 	$.LC4, -124(%rbp)
	movq 	-124(%rbp), %rdi
	call	printStr
	movl	%eax, -132(%rbp)
	movq 	$.LC5, -136(%rbp)
	movq 	-136(%rbp), %rdi
	call	printStr
	movl	%eax, -144(%rbp)
	movq 	-44(%rbp), %rdi
	call	printInt
	movl	%eax, -148(%rbp)
	movq 	$.LC6, -152(%rbp)
	movq 	-152(%rbp), %rdi
	call	printStr
	movl	%eax, -160(%rbp)
	movq 	$.LC7, -164(%rbp)
	movq 	-164(%rbp), %rdi
	call	printStr
	movl	%eax, -172(%rbp)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -176(%rbp)

	movl	-176(%rbp), %eax
	movl 	%eax, -44(%rbp)
	movq 	$.LC8, -184(%rbp)
	movq 	-184(%rbp), %rdi
	call	printStr
	movl	%eax, -192(%rbp)
	movq 	-44(%rbp), %rdi
	call	printInt
	movl	%eax, -196(%rbp)
	movq 	$.LC9, -200(%rbp)
	movq 	-200(%rbp), %rdi
	call	printStr
	movl	%eax, -208(%rbp)
	movq 	$.LC10, -212(%rbp)
	movq 	-212(%rbp), %rdi
	call	printStr
	movl	%eax, -220(%rbp)
	movl	-40(%rbp), %eax
	negl	%eax
	movl	%eax, -224(%rbp)

	movl	-224(%rbp), %eax
	movl 	%eax, -44(%rbp)
	movq 	$.LC11, -232(%rbp)
	movq 	-232(%rbp), %rdi
	call	printStr
	movl	%eax, -240(%rbp)
	movq 	-44(%rbp), %rdi
	call	printInt
	movl	%eax, -244(%rbp)
	movq 	$.LC12, -248(%rbp)
	movq 	-248(%rbp), %rdi
	call	printStr
	movl	%eax, -256(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je .L1
	jmp .L2
.L1: 
	nop
	movq 	$.LC13, -612(%rbp)
	movq 	-612(%rbp), %rdi
	call	printStr
	movl	%eax, -620(%rbp)
	jmp .L3
.L2: 
	nop
	movq 	$.LC14, -624(%rbp)
	movq 	-624(%rbp), %rdi
	call	printStr
	movl	%eax, -632(%rbp)
.L3: 
	movq 	$.LC15, -260(%rbp)
	movq 	-260(%rbp), %rdi
	call	printStr
	movl	%eax, -268(%rbp)
	movss	.LC35(%rip), %xmm0
	movss	%xmm0, -284(%rbp)

	movss	-284(%rbp), %xmm0
	movss	%xmm0, -272(%rbp)

	movss	.LC36(%rip), %xmm0
	movss	%xmm0, -292(%rbp)

	movss	-292(%rbp), %xmm0
	movss	%xmm0, -276(%rbp)

	movss	.LC37(%rip), %xmm0
	movss	%xmm0, -300(%rbp)

	movss	-300(%rbp), %xmm0
	movss	%xmm0, -280(%rbp)

	movq 	$.LC16, -308(%rbp)
	movq 	-308(%rbp), %rdi
	call	printStr
	movl	%eax, -316(%rbp)
	movss	-272(%rbp), %xmm0
	call	printFlt
	movl	%eax, -320(%rbp)
	movq 	$.LC17, -324(%rbp)
	movq 	-324(%rbp), %rdi
	call	printStr
	movl	%eax, -332(%rbp)
	movss	-276(%rbp), %xmm0
	call	printFlt
	movl	%eax, -336(%rbp)
	movq 	$.LC18, -340(%rbp)
	movq 	-340(%rbp), %rdi
	call	printStr
	movl	%eax, -348(%rbp)
	movss	-280(%rbp), %xmm0
	call	printFlt
	movl	%eax, -352(%rbp)
	movq 	$.LC19, -356(%rbp)
	movq 	-356(%rbp), %rdi
	call	printStr
	movl	%eax, -364(%rbp)
	movq 	$.LC20, -368(%rbp)
	movq 	-368(%rbp), %rdi
	call	printStr
	movl	%eax, -376(%rbp)
	movss	-272(%rbp), %xmm0
	addss	-276(%rbp), %xmm0
	movss	%xmm0, -380(%rbp)

	movss	-380(%rbp), %xmm0
	movss	%xmm0, -280(%rbp)

	movq 	$.LC21, -388(%rbp)
	movq 	-388(%rbp), %rdi
	call	printStr
	movl	%eax, -396(%rbp)
	movss	-280(%rbp), %xmm0
	call	printFlt
	movl	%eax, -400(%rbp)
	movq 	$.LC22, -404(%rbp)
	movq 	-404(%rbp), %rdi
	call	printStr
	movl	%eax, -412(%rbp)
	movq 	$.LC23, -416(%rbp)
	movq 	-416(%rbp), %rdi
	call	printStr
	movl	%eax, -424(%rbp)
	movss	-272(%rbp), %xmm0
	mulss	-276(%rbp), %xmm0
	movss	%xmm0, -428(%rbp)

	movss	-428(%rbp), %xmm0
	movss	%xmm0, -280(%rbp)

	movq 	$.LC24, -436(%rbp)
	movq 	-436(%rbp), %rdi
	call	printStr
	movl	%eax, -444(%rbp)
	movss	-280(%rbp), %xmm0
	call	printFlt
	movl	%eax, -448(%rbp)
	movq 	$.LC25, -452(%rbp)
	movq 	-452(%rbp), %rdi
	call	printStr
	movl	%eax, -460(%rbp)
	movq 	$.LC26, -464(%rbp)
	movq 	-464(%rbp), %rdi
	call	printStr
	movl	%eax, -472(%rbp)
	movss	-272(%rbp), %xmm0
	divss	-276(%rbp), %xmm0
	movss	%xmm0, -476(%rbp)

	movss	-476(%rbp), %xmm0
	movss	%xmm0, -280(%rbp)

	movq 	$.LC27, -484(%rbp)
	movq 	-484(%rbp), %rdi
	call	printStr
	movl	%eax, -492(%rbp)
	movss	-280(%rbp), %xmm0
	call	printFlt
	movl	%eax, -496(%rbp)
	movq 	$.LC28, -500(%rbp)
	movq 	-500(%rbp), %rdi
	call	printStr
	movl	%eax, -508(%rbp)
	movq 	$.LC29, -512(%rbp)
	movq 	-512(%rbp), %rdi
	call	printStr
	movl	%eax, -520(%rbp)
	movss	-272(%rbp), %xmm0
	movss	-276(%rbp), %xmm1
	subss	%xmm1, %xmm0
	movss	%xmm0, -524(%rbp)

	movss	-524(%rbp), %xmm0
	movss	%xmm0, -280(%rbp)

	movq 	$.LC30, -532(%rbp)
	movq 	-532(%rbp), %rdi
	call	printStr
	movl	%eax, -540(%rbp)
	movss	-280(%rbp), %xmm0
	call	printFlt
	movl	%eax, -544(%rbp)
	movq 	$.LC31, -548(%rbp)
	movq 	-548(%rbp), %rdi
	call	printStr
	movl	%eax, -556(%rbp)
	movq 	$.LC32, -560(%rbp)
	movq 	-560(%rbp), %rdi
	call	printStr
	movl	%eax, -568(%rbp)
	movss	.LC38(%rip), %xmm1
	movss	-276(%rbp), %xmm0
	mulss	%xmm1, %xmm0
	movss	%xmm0, -572(%rbp)

	movss	-572(%rbp), %xmm0
	movss	%xmm0, -280(%rbp)

	movq 	$.LC33, -580(%rbp)
	movq 	-580(%rbp), %rdi
	call	printStr
	movl	%eax, -588(%rbp)
	movss	-280(%rbp), %xmm0
	call	printFlt
	movl	%eax, -592(%rbp)
	movq 	$.LC34, -596(%rbp)
	movq 	-596(%rbp), %rdi
	call	printStr
	movl	%eax, -604(%rbp)
	movl	$0, %eax
	movl 	%eax, -608(%rbp)
	movq	-608(%rbp), %rax

	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
