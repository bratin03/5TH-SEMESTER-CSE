/*
 * @file ./testcases/output/ass6_21CS10016_21CS30050_test_2.s
 * @brief This file contains the assembly code for the input source file.
 * It is generated by the tinyC Compiler.
Assignment Number 6
Student Information:
 - Bratin Mondal(Roll Number - 21CS10016)
 - Somya Kumar(Roll Number - 21CS30050)
  */

	.file	"./testcases/input/ass6_21CS10016_21CS30050_test_2.c"
	.text
	.section	.rodata
.LC0:
	.string	"Guess a number between "
.LC1:
	.string	" and "
.LC2:
	.string	":\n"
.LC3:
	.string	"Too low! Guess again:\n"
.LC4:
	.string	"Too high! Guess again:\n"
.LC5:
	.string	"\nEnter a number(Lower Bound): "
.LC6:
	.string	"\nEnter a number(Upper Bound): "
.LC7:
	.string	"You guessed the number in "
.LC8:
	.string	" attempt(s)!\n"
.LC9:
	.float	-1
	.text
	.globl	min
	.type	min, @function
min: 
.LFB0:
	.cfi_startproc
	pushq 	%rbp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movq 	%rsp, %rbp
	.cfi_def_cfa_register 5
	subq	$44, %rsp
	movq	%rdi, -20(%rbp)
	movq	%rsi, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg .L1
	jmp .L2
.L1: 
	movl	-16(%rbp), %eax
	movl 	%eax, -28(%rbp)
	jmp .L3
.L2: 
	movl	-20(%rbp), %eax
	movl 	%eax, -28(%rbp)
.L3: 
	movl	-28(%rbp), %eax
	movl 	%eax, -24(%rbp)
	movq	-24(%rbp), %rax

	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE0:
	.size	min, .-min
	.globl	max
	.type	max, @function
max: 
.LFB1:
	.cfi_startproc
	pushq 	%rbp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movq 	%rsp, %rbp
	.cfi_def_cfa_register 5
	subq	$44, %rsp
	movq	%rdi, -20(%rbp)
	movq	%rsi, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jl .L4
	jmp .L5
.L4: 
	movl	-16(%rbp), %eax
	movl 	%eax, -28(%rbp)
	jmp .L6
.L5: 
	movl	-20(%rbp), %eax
	movl 	%eax, -28(%rbp)
.L6: 
	movl	-28(%rbp), %eax
	movl 	%eax, -24(%rbp)
	movq	-24(%rbp), %rax

	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE1:
	.size	max, .-max
	.globl	gcdAlgorithm
	.type	gcdAlgorithm, @function
gcdAlgorithm: 
.LFB2:
	.cfi_startproc
	pushq 	%rbp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movq 	%rsp, %rbp
	.cfi_def_cfa_register 5
	subq	$44, %rsp
	movq	%rdi, -20(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, %eax
	movl 	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	je .L7
	jmp .L8
.L7: 
	movq	-16(%rbp), %rax

	jmp .L9
.L8: 
	movl 	-16(%rbp), %eax
	cltd
	idivl 	-20(%rbp)
	movl 	%edx, -28(%rbp)
	movq 	-28(%rbp), %rdi
	movq 	-20(%rbp), %rsi
	call	gcdAlgorithm
	movl	%eax, -32(%rbp)
	movq	-32(%rbp), %rax

.L9: 
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE2:
	.size	gcdAlgorithm, .-gcdAlgorithm
	.globl	guessing_game
	.type	guessing_game, @function
guessing_game: 
.LFB3:
	.cfi_startproc
	pushq 	%rbp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movq 	%rsp, %rbp
	.cfi_def_cfa_register 5
	subq	$184, %rsp
	movq	%rdi, -20(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$1, %eax
	movl 	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl 	%eax, -24(%rbp)
	movq 	-20(%rbp), %rdi
	movq 	-16(%rbp), %rsi
	call	min
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movl 	%eax, -32(%rbp)
	movq 	-20(%rbp), %rdi
	movq 	-16(%rbp), %rsi
	call	max
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl 	%eax, -40(%rbp)
	movq 	-32(%rbp), %rdi
	movq 	-40(%rbp), %rsi
	call	gcdAlgorithm
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	movl 	%eax, -48(%rbp)
	movl	-32(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -60(%rbp)

	movl	-60(%rbp), %eax
	movl 	%eax, -56(%rbp)
	movq 	$.LC0, -68(%rbp)
	movq 	-68(%rbp), %rdi
	call	printStr
	movl	%eax, -76(%rbp)
	movq 	-32(%rbp), %rdi
	call	printInt
	movl	%eax, -80(%rbp)
	movq 	$.LC1, -84(%rbp)
	movq 	-84(%rbp), %rdi
	call	printStr
	movl	%eax, -92(%rbp)
	movq 	-40(%rbp), %rdi
	call	printInt
	movl	%eax, -96(%rbp)
	movq 	$.LC2, -100(%rbp)
	movq 	-100(%rbp), %rdi
	call	printStr
	movl	%eax, -108(%rbp)
	leaq	-64(%rbp), %rax
	movq 	%rax, -112(%rbp)
	movq 	-112(%rbp), %rdi
	call	readInt
	movl	%eax, -120(%rbp)
	nop
.L10: 
	movl	-64(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne .L11
	jmp .L15
.L11: 
	movl	-64(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jl .L12
	jmp .L13
.L12: 
	nop
	movq 	$.LC3, -128(%rbp)
	movq 	-128(%rbp), %rdi
	call	printStr
	movl	%eax, -136(%rbp)
	leaq	-64(%rbp), %rax
	movq 	%rax, -140(%rbp)
	movq 	-140(%rbp), %rdi
	call	readInt
	movl	%eax, -148(%rbp)
	jmp .L14
.L13: 
	nop
	movq 	$.LC4, -152(%rbp)
	movq 	-152(%rbp), %rdi
	call	printStr
	movl	%eax, -160(%rbp)
	leaq	-64(%rbp), %rax
	movq 	%rax, -164(%rbp)
	movq 	-164(%rbp), %rdi
	call	readInt
	movl	%eax, -172(%rbp)
.L14: 
	movl	-24(%rbp), %eax
	movl 	%eax, -124(%rbp)
	movl	-24(%rbp), %eax
	incl	%eax
	movl	%eax, -24(%rbp)

	jmp .L10
.L15: 
	movq	-24(%rbp), %rax

	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE3:
	.size	guessing_game, .-guessing_game
	.globl	main
	.type	main, @function
main: 
.LFB4:
	.cfi_startproc
	pushq 	%rbp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movq 	%rsp, %rbp
	.cfi_def_cfa_register 5
	subq	$120, %rsp

	movq 	$.LC5, -32(%rbp)
	movq 	-32(%rbp), %rdi
	call	printStr
	movl	%eax, -40(%rbp)
	leaq	-24(%rbp), %rax
	movq 	%rax, -44(%rbp)
	movq 	-44(%rbp), %rdi
	call	readInt
	movl	%eax, -52(%rbp)
	movq 	$.LC6, -56(%rbp)
	movq 	-56(%rbp), %rdi
	call	printStr
	movl	%eax, -64(%rbp)
	leaq	-28(%rbp), %rax
	movq 	%rax, -68(%rbp)
	movq 	-68(%rbp), %rdi
	call	readInt
	movl	%eax, -76(%rbp)
	movq 	-24(%rbp), %rdi
	movq 	-28(%rbp), %rsi
	call	guessing_game
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movl 	%eax, -80(%rbp)
	movq 	$.LC7, -88(%rbp)
	movq 	-88(%rbp), %rdi
	call	printStr
	movl	%eax, -96(%rbp)
	movq 	-80(%rbp), %rdi
	call	printInt
	movl	%eax, -100(%rbp)
	movq 	$.LC8, -104(%rbp)
	movq 	-104(%rbp), %rdi
	call	printStr
	movl	%eax, -112(%rbp)
	movl	$0, %eax
	movl 	%eax, -116(%rbp)
	movq	-116(%rbp), %rax

	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE4:
	.size	main, .-main
